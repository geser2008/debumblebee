AUTOMATIC INSTALLATION

With Debian you may run install.sh under root user to get everything working.
This script is completely tested and working on 64 bit Sid. If you are running
Testing, Stable or different architecture and debumblebee isn't working, then
please check Manual Installation section. Unfortunately, I can provide limited
support for them.


MANUAL INSTALLATION

1) Install proprietary nVidia graphics driver in distro's preferred way (under
   Debian it's "apt-get install nvidia-kernel-dkms").
   - Additionally you may need package with nvidia-xconfig, if it isn't provided
     with default installation;
   - If you are running 64 bit arch and want to use 32 bit apps (mostly through
     wine), install additional 32 bit nVidia libraries (on Debian it can be
     archived via "apt-get install libgl1-nvidia-glx-ia32");
2) You need to alter libGL.so library, libglx.so Xorg module and any other
   libraries replaced by nVidia back to free version, but keep nVidia version
   somewhere (usually they are placed in /usr/lib/nvidia*). In Debian based
   distros it should be done via alternatives mechanism, please check
   update-alternatives manual page and /etc/alternatives folder.
3) Install the VirtualGL package from http://www.virtualgl.org/.
4) Prepare additional nVidia X server init script and special xorg.conf for it.
   You may check install-files/debian/debumblebee init script and
   install-files/debian/xorg.conf.nvidia for configuration. The main points are:
   - init script should start after any nvidia initializations (nvidia-kernel
     on Debian) and after kdm/gdm;
   - nVidia X server should use nVidia's libraries libGL.so and libglx.so. The
     libGL.so library could be loaded via LD_LIBRARY_PATH and the Xorg module
     should be loaded via X command line option -modulepath (at least it should
     be loaded BEFORE the free libglx.so module). To archive this in Debian
     create a /usr/local/lib/debumblebee folder, symlink nVidia libglx.so there
     and launch X server with the following option:
     "-modulepath /usr/local/lib/debumblebee,/usr/lib/xorg/modules";
   - X server should use second screen ":1 vt8";
   - X server should use custom xorg configuration for nVidia card:
     "-config /etc/X11/xorg.conf.nvidia";
   - in xorg.conf.nvidia replace:
     - BusID with nVidia card PCI ID. You can obtain it from lspci or
       "nvidia-xconfig --query-gpu-info" output, in xorg.conf.nvidia it should
       be something like "PCI:1:0:0";
     - Option ConnectedMonitor should be replaced with "CRT-0" or "DFP-0", this
       depends on your laptop model, you can find the correct one from
       "nvidia-xconfig --query-gpu-info" output;
6) Copy install-files/debian/debumblebee.default to /etc/default/debumblebee,
   install-files/debian/debumblebee.sudoers to /etc/sudoers.d/debumblebee. This
   is required to enable on demand support. Also you need to make sure that sudo
   package is installed.
7) Copy optirun and optirun32 (only for 64 bit arch, if you want to use 32 bit
   applications) files from install-files/debian folder somewhere into your
   system wide PATH, /usr/local/bin is recommended place.
8) If you followed this instruction closely, everything should be working. You
   may check outputs of "glxgears -info" and "optirun glxgears -info" for
   confirmation.


CONFIGURING

Configuration file is /etc/default/debumblebee.

By default we are using method proxy from vglrun for OpenGL transfer. You can
switch to another method, if this one unsatisfies you. Please check the output
of "vglrun -h".

By default debumblebee configured to start only on demand invoked from optirun
script. You can change this behavior in configuration file.


POWER SAVE OPTION

There is POWER_SAVE option in configuration file. If you set it to "yes", than
the debumblebee init script will disable nVidia when it isn't used. This should
lower your power consumtion and increase battery's life. Before enabling this
option you need to do two things.

First is to build and install acpi_call module, you can find it in
install-files/contrib/acpi_call folder. Installation script requires root rights
and dkms (it was installed with nVidia modules). This module is used for passing
command strings to acpi subsystem.

Second is to prepare enablecard and disablecard shell scripts. You can find
samples in install-files/contrib/power_off_on folder. Copy them to
/usr/local/bin folder. You MUST change command strings passed in those scripts
depending on your laptop. How do you find them? There are several ways. First
check the http://hybrid-graphics-linux.tuxfamily.org/index.php?title=ACPI_calls
link. Then you can check original bumblebee repo, it already has a bunch of
confirmed scripts. Also you may use test_off.sh script from acpi_call.

After preparation is completed you may enable POWER_SAVE option.

Right now I'm not going to enable this feature by default nor adding it to
automatic installation. This is still experimental feature and may not work as
it should. For example my own ASUS K53SJ starts to run coolers at full speed
after turning off the nVidia card.
