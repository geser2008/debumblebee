#!/bin/sh

ARCH=`uname -m`

echo "Installing required packages."

apt-get update
apt-get -y install nvidia-kernel-dkms sudo dmidecode
if [ $? -ne 0 ]; then
	echo "Package manager failed to install nvidia packages." 1>&2
	echo "Please check that you have non-free repository enabled." 1>&2
	exit 2
fi
if [ $ARCH = x86_64 ]; then
	apt-get -y install libgl1-nvidia-glx-ia32
	wget -P /tmp http://virtualgl.sourceforge.net/nightly.22/VirtualGL_amd64.deb
	if [ $? -ne 0 ]; then
		echo "Failed to download VirtualGL package." 1>&2
		exit 3
	fi
	dpkg -i /tmp/VirtualGL_amd64.deb
else
	wget -P /tmp http://virtualgl.sourceforge.net/nightly.22/VirtualGL_i386.deb
	if [ $? -ne 0 ]; then
		echo "Failed to download VirtualGL package." 1>&2
		exit 3
	fi
	dpkg -i /tmp/VirtualGL_i386.deb
fi
if [ $? -ne 0 ]; then
	echo "Package manager failed to install VirtualGL." 1>&2
	exit 4
fi
rm -f /tmp/VirtualGL_*.deb

echo
echo "Installing and configuring support files."

cp debian/xorg.conf.nvidia /etc/X11/
cp debian/debumblebee /etc/init.d/debumblebee
cp debian/debumblebee.default /etc/default/debumblebee
cp debian/debumblebee.sudoers /etc/sudoers.d/debumblebee
cp debian/optirun /usr/local/bin
cp debian/optirun.bash /etc/bash_completion.d/optirun
if [ $ARCH = x86_64 ]; then
	cp debian/optirun32 /usr/local/bin
fi
mkdir /usr/local/lib/debumblebee
ln -s /usr/lib/nvidia/libglx.so /usr/local/lib/debumblebee/libglx.so

#Stolen from glx-alternative-(nvidia|mesa) packages
TRIPLETS="/ /i386-linux-gnu/ /x86_64-linux-gnu/"

add_slave()
{
	local target_link name source_path triplet
	target_link="$1"
	name="$2"
	source_path="$3"
	if [ -f "${source_path}" ]; then
		echo --slave "${target_link}" "glx--${name}" "${source_path}"
	fi
}

add_multiarch_slave()
{
	local target_dir file source_dir source_sub_dir triplet
	target_dir="$1"
	file="$2"
	source_dir="$3"
	source_sub_dir="$4"
	for triplet in $TRIPLETS ; do
		add_slave \
			"${target_dir}${triplet}${file}" \
			"${file}$(echo ${triplet} | sed -e 's/\/$//; s/^\//-/')" \
			"${source_dir}${triplet}${source_sub_dir}${file}"
	done
}

slaves="
	$(add_multiarch_slave /usr/lib libGL.so.1 /usr/lib/mesa-diverted)
	$(add_multiarch_slave /usr/lib libnvidia-cfg.so.1 /usr/lib nvidia/)
	$(add_multiarch_slave /usr/lib libXvMCNVIDIA.so.1 /usr/lib nvidia/)
	$(add_multiarch_slave /usr/lib libXvMCNVIDIA_dynamic.so.1 /usr/lib nvidia/)
	$(add_slave /usr/bin/nvidia-bug-report.sh nvidia-bug-report.sh /usr/lib/nvidia/nvidia-bug-report.sh)
	$(add_slave /usr/lib/xorg/modules/extensions/libglx.so libglx.so /usr/lib/mesa-diverted/libglx.so)
	$(add_slave /usr/lib/xorg/modules/drivers/nvidia_drv.so nvidia_drv.so /usr/lib/nvidia/nvidia_drv.so)
       "
update-alternatives --install /usr/lib/glx glx /usr/local/lib/debumblebee 200 $slaves

if [ $ARCH = x86_64 ]; then
	update-alternatives --set ia32-libGL.so.1 /usr/lib32/nvidia/diversions/libGL.so.1
fi

NVIDIABUSID=PCI:`lspci -mm | egrep '(VGA|3D)*nVidia' | cut -f1 -d' ' | tr . : | sed 's/0\([0-9a-f]:\)/\1/g'`
sed -i 's/REPLACEWITHBUSID/'$NVIDIABUSID'/g' /etc/X11/xorg.conf.nvidia

MODEL=`dmidecode --string system-product-name`
MONITOR=`./monitor.sh $MODEL`

if [ $MONITOR != NONE ]; then
	sed -i 's/REPLACEWITHCONNECTEDMONITOR/'$MONITOR'/g' /etc/X11/xorg.conf.nvidia
else
	sed -i '/.*ConnectedMonitor.*/d' /etc/X11/xorg.conf.nvidia
fi

echo
echo "Enabling debumblebee service."

update-rc.d debumblebee defaults
modprobe nvidia

exit 0
